- name: install
  hosts: localhost

  tasks:

    - name: "include vars files"
      ansible.builtin.include_vars:
        file: vars.yml
      tags: "always"

    - name: "add yum repos"
      ansible.builtin.yum_repository:
        name: "{{ item.yum_repo_name }}"
        baseurl: "{{ item.yum_repo_baseurl }}"
        description: "{{ item.yum_repo_description }}"
        enabled: "{{ item.yum_repo_enabled }}"
        file: "{{ item.yum_repo_file }}"
        gpgcheck: "{{ item.yum_repo_gpgcheck }}"
        gpgkey: "{{ item.yum_repo_gpgkey }}"
      loop: "{{ yum_repo_list }}"
      become: true
      tags: "dnf"

    - name: "install dnf packages"
      ansible.builtin.dnf:
        name: "{{ dnf_install_list }}"
        state: "latest"
      become: true
      tags:
        - "dnf"
        - "install"

    - name: "add flathub remote"
      community.general.flatpak_remote:
        name: "flathub"
        state: "present"
        flatpakrepo_url: "https://dl.flathub.org/repo/flathub.flatpakrepo"
      become: true
      tags:
        - "flatpak"
        - "install"

    - name: "install flatpak packages"
      community.general.flatpak:
        name: "{{ item }}"
        state: "present"
        remote: "flathub"
      loop: "{{ flatpak_packages }}"
      tags:
        - "flatpak"
        - "install"

    - name: "install pip packages"
      ansible.builtin.pip:
        name: "{{ item }}"
        state: "forcereinstall"
      loop: "{{ pip_packages }}"
      tags:
        - "install"
        - "pip"
    
    - name: "enable and start services"
      ansible.builtin.systemd:
        name: "docker"
        state: started
        enabled: true
      become: true

    ##################################
    ### create and configure users ###
    ##################################
    - name: "configure users"
      ansible.builtin.user:
        name: "rross"
        generate_ssh_key: true
        groups: "docker,wheel"
        shell: "/bin/fish"
        ssh_key_bits: 2048
        ssh_key_file: ".ssh/id_rsa"
      become: true
      tags:
        - users

    - name: "template shell configs"
      ansible.builtin.template:
        src: "config.fish.j2"
        dest: "/home/{{ lookup('env', 'USER') }}/.config/fish/config.fish"
        owner: "{{ lookup('env', 'USER') }}"
        group: "{{ lookup('env', 'USER') }}"
        mode: 0644
      tags:
        - "shell"
        - "fish"

    - name: "check for oh-my-fish installer"
      ansible.builtin.stat:
        path: "/home/{{ lookup('env', 'USER') }}/omf-install"
      register: omf_installed
      tags: 
        - "fish"
        - "shell"

    - name: "block for installing omf"
      block:

        - name: "get oh-my-fish installer"
          ansible.builtin.get_url:
            checksum: "sha256:bb1f4025934600ea6feef2ec11660e17e2b6449c5a23c033860aed712ad328c9"
            dest: "/home/{{ lookup('env', 'USER') }}/omf-install"
            group: "{{ lookup('env', 'USER') }}"
            mode: 0700
            owner: "{{ lookup('env', 'USER') }}"
            url: "https://get.oh-my.fish"
          tags:
            - fish
            - omf

        # TODO: check if omf is installed because this will hang
        - name: "install oh-my-fish package manager"
          ansible.builtin.command: 
            cmd: "fish omf-install"
          args:
            chdir: "/home/{{ lookup('env', 'USER') }}"
          tags:
            - fish
            - omf

        - name: "remove oh-my-fish installer"
          ansible.builtin.file:
            path: "/home/{{ lookup('env', 'USER') }}/omf-install"
            state: "absent"
          tags:
            - fish
            - omf

      when: not omf_installed.stat.exists

...
#EOF