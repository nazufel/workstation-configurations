# install.yml

# playbook to configure a workstation from scratch

# Copyright 2021 Ryan Ross (nazufel)

---
- name: install
  hosts: localhost

  tasks:

    - name: "include vars files"
      ansible.builtin.include_vars:
        dir: "vars"
        extensions: 
          - "yml"
      tags: "always"

    - name: "add yum repos"
      ansible.builtin.yum_repository:
        name: "{{ item.yum_repo_name }}"
        baseurl: "{{ item.yum_repo_baseurl }}"
        description: "{{ item.yum_repo_description }}"
        enabled: "{{ item.yum_repo_enabled }}"
        file: "{{ item.yum_repo_file }}"
        gpgcheck: "{{ item.yum_repo_gpgcheck }}"
        gpgkey: "{{ item.yum_repo_gpgkey }}"
      loop: "{{ yum_repo_list }}"
      become: true
      tags: "dnf"

    # the exlude exists so that the cronjob that runs dnf update hourly doens't
    # overwrite any hard-coded package versions. However, dnf install will fail
    # becuase there is an exclusion of required packages. Thus, the exclusion is 
    # removed before running dnf install, then placed again so the cronjob
    # doesn't upgrade the specific versions. Not elegant, but works.
    - name: "remove dnf to exlude for certain packages"
      ansible.builtin.lineinfile:
        path: "/etc/dnf/dnf.conf"
        regexp: '^exclude='
        state: "absent"
      become: true
      tags:
        - "dnf"

    - name: "install dnf packages"
      ansible.builtin.dnf:
        name: "{{ dnf_install_list }}"
        state: "latest"
      become: true
      tags:
        - "dnf"
        - "install"

    - name: "set dnf to exlude for certain packages"
      ansible.builtin.lineinfile:
        line: 'exclude={{ dnf_update_exclude_packages }}'
        path: "/etc/dnf/dnf.conf"
        regexp: '^exclude'
        state: "present"
      become: true
      tags:
        - "dnf"

    - name: "add flathub remote"
      community.general.flatpak_remote:
        name: "flathub"
        state: "present"
        flatpakrepo_url: "https://dl.flathub.org/repo/flathub.flatpakrepo"
      become: true
      tags:
        - "flatpak"
        - "install"

    - name: "install flatpak packages"
      community.general.flatpak:
        name: "{{ item }}"
        state: "present"
        remote: "flathub"
      loop: "{{ flatpak_packages }}"
      tags:
        - "flatpak"
        - "install"

    - name: "install pip packages"
      ansible.builtin.pip:
        name: "{{ item }}"
        state: "forcereinstall"
      loop: "{{ pip_packages }}"
      tags:
        - "install"
        - "pip"

    - name: "check for kubectx"
      ansible.builtin.stat:
        path: "/usr/local/bin/kubectx"
      register: "kubectx_installed"
      tags:
        - "install"
        - "kubernetes"

    - name: "get kubectx and kubens release v{{ kubectx_kubens_release }} binaries"
      ansible.builtin.get_url:
        url: "https://github.com/ahmetb/kubectx/releases/download/v{{ kubectx_kubens_release }}/{{ item }}_v{{ kubectx_kubens_release }}_linux_x86_64.tar.gz"
        dest: "/home/{{ lookup('env', 'USER') }}/Downloads/{{ item }}.tar.gz"
      loop:
        - "kubectx"
        - "kubens"
      tags:
        - "install"
        - "kubernetes"
      register: kubectx_kubens_install
      when: not kubectx_installed.stat.exists

    - name: "unarchive kubectx and kubens"
      ansible.builtin.unarchive:
        dest: "/usr/local/bin"
        owner: "root"
        group: "root"
        mode: 0777
        src: "/home/{{ lookup('env', 'USER') }}/Downloads/{{ item }}.tar.gz"
      become: true
      loop:
        - "kubectx"
        - "kubens"
      tags:
        - "kubernetes"
      when: kubectx_kubens_install is defined and kubectx_kubens_install.changed

    - name: "clean up kubectx and kubens tarballs from Downloads"
      ansible.builtin.file:
        path: "/home/{{ lookup('env', 'USER') }}/Downloads/{{ item }}.tar.gz"
        state: absent
      loop:
        - "kubectx"
        - "kubens"
      tags:
        - "install"
        - "kubernetes"
      when: kubectx_kubens_install.changed

    - name: "remove previous kind"
      ansible.builtin.file:
        path: "/usr/local/bin/kind"
        state: "absent"
      tags:
        - "install"
        - "kubernetes"

    - name: "install kind"
      ansible.builtin.get_url:
        dest: "/usr/local/bin/kind"
        group: "root"
        mode: 0777
        owner: "root"
        url: "https://kind.sigs.k8s.io/dl/v0.11.0/kind-linux-amd64"
      become: true
      tags:
        - "install"
        - "kubernetes"

    - name: "check for helm"
      ansible.builtin.stat:
        path: "/usr/local/bin/helm"
      register: "helm_installed"
      tags:
        - "helm"
        - "install"
        - "kubernetes"

    - name: "download helm tarball"
      ansible.builtin.get_url:
        url: "https://get.helm.sh/helm-v3.5.4-linux-amd64.tar.gz"
        dest: "/home/{{ lookup('env', 'USER') }}/Downloads/helm-v3.5.4-linux-amd64.tar.gz"
      tags:
        - "install"
        - "kubernetes"
        - "helm"
      register: helm_install
      when: not helm_installed.stat.exists

    - name: "unarchive and install helm"
      ansible.builtin.unarchive:
        dest: "/usr/local/bin"
        extra_opts: [--strip-components=1]
        group: "root"
        mode: 0777
        owner: "root"
        src: "/home/{{ lookup('env', 'USER') }}/Downloads/helm-v3.5.4-linux-amd64.tar.gz"
      become: true
      tags:
        - "helm"
        - "install"
        - "kubernetes"
      when: helm_install is defined and helm_install.changed

    - name: "clean up helm tarball from Downloads"
      ansible.builtin.file:
        path: "/home/{{ lookup('env', 'USER') }}/Downloads/helm-v3.5.4-linux-amd64.tar.gz"
        state: absent
      tags:
        - "helm"
        - "install"
        - "kubernetes"
      when: helm_install.changed

    - name: "enable and start services"
      ansible.builtin.systemd:
        name: "docker"
        state: started
        enabled: true
      become: true

    ##################################
    ### create and configure users ###
    ##################################
    - name: "configure users"
      ansible.builtin.user:
        name: "rross"
        generate_ssh_key: true
        groups: "docker,wheel"
        shell: "/bin/fish"
        ssh_key_bits: 2048
        ssh_key_file: ".ssh/id_rsa"
      become: true
      tags:
        - users

    - name: "template shell configs"
      ansible.builtin.template:
        src: "config.fish.j2"
        dest: "/home/{{ lookup('env', 'USER') }}/.config/fish/config.fish"
        owner: "{{ lookup('env', 'USER') }}"
        group: "{{ lookup('env', 'USER') }}"
        mode: 0644
      tags:
        - "shell"
        - "fish"

    - name: "check for oh-my-fish installer"
      ansible.builtin.stat:
        path: "/home/{{ lookup('env', 'USER') }}/omf-install"
      register: omf_installed
      tags: 
        - "fish"
        - "shell"

    - name: "create fish complections directory"
      ansible.builtin.file:
        group: "{{ lookup('env', 'USER') }}"
        mode: 0770
        owner: "{{ lookup('env', 'USER') }}"
        path: "/home/{{ lookup('env', 'USER') }}/.config/fish/completions"
        state: "directory"
      tags:
        - "fish"
        - "shell"

    - name: "copy fish completions"
      ansible.builtin.copy:
        dest: "/home/{{ lookup('env', 'USER') }}/.config/fish/completions/{{ item }}.fish"
        owner: "{{ lookup('env', 'USER') }}"
        group: "{{ lookup('env', 'USER') }}"
        mode: 0644
        src: "files/{{ item }}.fish"
      loop: 
        - "kubectx"
        - "kubens"
      tags:
        - "fish"
        - "shell"

    - name: "block for installing omf"
      block:

        - name: "get oh-my-fish installer"
          ansible.builtin.get_url:
            checksum: "sha256:bb1f4025934600ea6feef2ec11660e17e2b6449c5a23c033860aed712ad328c9"
            dest: "/home/{{ lookup('env', 'USER') }}/omf-install"
            group: "{{ lookup('env', 'USER') }}"
            mode: 0700
            owner: "{{ lookup('env', 'USER') }}"
            url: "https://get.oh-my.fish"
          tags:
            - fish
            - omf

        # TODO: check if omf is installed because this will hang
        - name: "install oh-my-fish package manager"
          ansible.builtin.command: 
            cmd: "fish omf-install"
          args:
            chdir: "/home/{{ lookup('env', 'USER') }}"
          tags:
            - fish
            - omf

        - name: "remove oh-my-fish installer"
          ansible.builtin.file:
            path: "/home/{{ lookup('env', 'USER') }}/omf-install"
            state: "absent"
          tags:
            - fish
            - omf

      when: not omf_installed.stat.exists

    - name: "create dnf update cronjob"
      ansible.builtin.cron:
        name: "dnf update"
        weekday: "*"
        minute: "0"
        hour: "*"
        user: root
        job: "dnf update -y"
        cron_file: ansible_dnf_update
      become: true      
      tags:
        - "cron"


...
#EOF